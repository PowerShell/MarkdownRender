name: MarkdownRenderer-Release-$(Build.BuildId)
trigger: none

pr:
  branches:
    include:
    - master
    - release*

variables:
  DOTNET_CLI_TELEMETRY_OPTOUT: 1
  POWERSHELL_TELEMETRY_OPTOUT: 1

resources:
  repositories:
  - repository: ComplianceRepo
    type: github
    endpoint: ComplianceGHRepo
    name: PowerShell/compliance

stages:
- stage: Build
  displayName: Build
  pool:
    name: Package ES CodeHub Lab E
  jobs:
  - job: Build_Job
    displayName: Build Microsoft.PowerShell.MarkdownRenderer
    steps:
    - checkout: self

    - pwsh: |
        $versionString = if ($env:RELEASE_VERSION -eq 'fromBranch') {
          $branch = $env:BUILD_SOURCEBRANCH
          $branchOnly = $branch -replace '^refs/heads/'
          $branchOnly -replace '^.*(release[-/])'
        }
        else {
            $env:RELEASE_VERSION
        }

        $nugetVersion = if ($versionString.StartsWith('v')) {
            $versionString.Substring(1)
        }
        else {
            $versionString
        }

        $vstsCommandString = "vso[task.setvariable variable=Version]$nugetVersion"
        Write-Verbose -Message "setting Version to $releaseTag" -Verbose
        Write-Host -Object "##$vstsCommandString"
      displayName: Set NuGet package version variable

    - pwsh: |
        ./build.ps1 -Clean -Configuration 'Release'
      displayName: Execute build

    - pwsh: |
        $symbolPath = Get-ChildItem -Path "$(Build.SourcesDirectory)\out" -Recurse -Filter 'Microsoft.PowerShell.MarkdownRenderer.pdb'
      displayName: Upload PDB

    - pwsh: |
        $signSrcPath = "$(Build.SourcesDirectory)\out"
        # Set signing src path variable
        $vstsCommandString = "vso[task.setvariable variable=signSrcPath]${signSrcPath}"
        Write-Host "sending " + $vstsCommandString
        Write-Host "##$vstsCommandString"

        $signOutPath = "$(Build.SourcesDirectory)\signed"
        $null = New-Item -ItemType Directory -Path $signOutPath
        # Set signing out path variable
        $vstsCommandString = "vso[task.setvariable variable=signOutPath]${signOutPath}"
        Write-Host "sending " + $vstsCommandString
        Write-Host "##$vstsCommandString"

        $nugetSrcPath = "$(System.ArtifactsDirectory)/nuget"
        # Set signing src path variable
        $vstsCommandString = "vso[task.setvariable variable=nugetSrcPath]${nugetSrcPath}"
        Write-Host "sending " + $vstsCommandString
        Write-Host "##$vstsCommandString"

        $nugetOutPath = "$(System.ArtifactsDirectory)\nuget\signed"
        $null = New-Item -ItemType Directory -Path $nugetOutPath
        # Set signing out path variable
        $vstsCommandString = "vso[task.setvariable variable=nugetOutPath]${nugetOutPath}"
        Write-Host "sending " + $vstsCommandString
        Write-Host "##$vstsCommandString"

        $symbolPath = Get-ChildItem -Path "$(Build.SourcesDirectory)\out" -Recurse -Filter 'Microsoft.PowerShell.MarkdownRenderer.pdb'
        $vstsCommandString = "vso[task.setvariable variable=pdbPath]${symbolPath}"
        Write-Host "sending " + $vstsCommandString
        Write-Host "##$vstsCommandString"
      displayName: Setup variables for signing

    - checkout: ComplianceRepo

    - template: EsrpSign@ComplianceRepo
      parameters:
        # the folder which contains the binaries to sign
        buildOutputPath: $(signSrcPath)
        # the location to put the signed output
        signOutputPath: $(signOutPath)
        # the certificate ID to use
        certificateId: "CP-230012"
        # the file pattern to use, comma separated
        pattern: '*.dll'

    - pwsh: |
        Copy-Item -Path "$env:SIGNSRCPATH\*.dll" -Destination "$env:SIGNOUTPATH\" -recurse -verbose
      displayName: Dummy copy to signed
      condition: eq(variables['SkipSigning'], 'True')

    - publish: "signed/"
      artifact: assembly
      displayName: Publish assembly

    - publish: "$(pdbPath)"
      artifact: symbols
      displayName: Publish symbols

    - task: NuGetToolInstaller@1
      displayName: 'Install NuGet.exe'

    - pwsh: |
        $packageRootPath = '$(System.ArtifactsDirectory)/Microsoft.PowerShell.MarkdownRenderer'
        $libPath = "$packageRootPath/lib/netstandard2.0"
        $null = New-Item -ItemType Directory -Path $libPath -Force
        Copy-Item -Path "$env:signOutPath\*" -Destination $libPath -Verbose
        Copy-Item -Path '$(Build.SourcesDirectory)/yaml/microsoft.powershell.markdownrenderer.nuspec' -Destination $packageRootPath -Verbose
        Push-Location $packageRootPath
        $version = "$env:VERSION"
        Write-Verbose -Verbose "Creating NuGet package with version $version"
        nuget.exe pack . -Version $version

        if (-not (Test-Path "./Microsoft.PowerShell.MarkdownRenderer.$version.nupkg")) {
            throw 'NuGet package not created.'
        }
        else {
            Copy-Item "./Microsoft.PowerShell.MarkdownRenderer.$version.nupkg" -Destination '$(System.ArtifactsDirectory)/nuget' -Verbose -Force
        }
      displayName: Create NuGet Package

    - template: EsrpSign@ComplianceRepo
      parameters:
        # the folder which contains the binaries to sign
        buildOutputPath: $(nugetSrcPath)
        # the location to put the signed output
        signOutputPath: $(nugetOutPath)
        # the certificate ID to use
        certificateId: "CP-401405"
        # the file pattern to use, comma separated
        pattern: '*.nupkg'

    - pwsh: |
        Copy-Item -Path "$env:NUGETSRCPATH\*.nupkg" -Destination "$env:NUGETOUTPATH\" -recurse -verbose
      displayName: Dummy nuget copy to signed
      condition: eq(variables['SkipSigning'], 'True')

    - pwsh: |
        $version = "$env:VERSION"
        $nugetPkgPath = Get-Item -Path "$env:NUGETOUTPATH/Microsoft.PowerShell.MarkdownRenderer.$version.nupkg"
        $vstsCommandString = "vso[task.setvariable variable=nugetPkgPath]${nugetPkgPath}"
        Write-Host "sending " + $vstsCommandString
        Write-Host "##$vstsCommandString"
      displayName: Set nuget package path

    - publish: '$(NUGETPKGPATH)'
      artifact: nuget
      displayName: Publish nuget package

- stage: compliance
  displayName: Compliance
  dependsOn: Build
  jobs:
  - job: Compliance_Job
    pool:
      name: Package ES CodeHub Lab E
    steps:
    - checkout: self
    - checkout: ComplianceGHRepo
    - template: assembly-module-compliance.yml@ComplianceRepo
      parameters:
        # binskim
        AnalyzeTarget: '$(signOutPath)\*.dll'
        AnalyzeSymPath: 'SRV*'
        # component-governance
        sourceScanPath: '$(Build.SourcesDirectory)\Markdownrender'
        # credscan
        suppressionsFile: ''
        # TermCheck
        optionsRulesDBPath: ''
        optionsFTPath: ''
        # tsa-upload
        codeBaseName: 'MarkdownRender_20201023'
        # selections
        APIScan: false # set to false when not using Windows APIs.

#- template: template/publish.yml
#  parameters:
#    stageName: AzArtifactsFeed
#    environmentName:
#    feedCredential:

#- template: template/publish.yml
#  parameters:
#    stageName: NuGet
#    environmentName: PSMarkdownRendererNuGetApproval
#    feedCredential: NugetOrgPush
